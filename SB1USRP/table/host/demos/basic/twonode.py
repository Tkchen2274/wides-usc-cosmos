"""
:Description: 

:Rule: Make SDR1 as Tx, and SDR2 as Rx. 

"""

# Import Libraries
import os
import sys
import socket
import time
import argparse
import matplotlib
import subprocess
import numpy as np
import configparser
import csv
import time
import threading

matplotlib.use('TkAgg')
from matplotlib import pyplot as plt

path = os.path.abspath('../../')
if not path in sys.path:
    sys.path.append(path)
import mmwsdr


def main():
    """

    :return:
    :rtype:
    """

    # ------ Sounding Signal ------
    # sounding_signal = 'wides_ofdm_'
    # sounding_signal = 'demo_'
    # sounding_signal_id = 2

    # ------ Parameters ------
    # N_fft = 1024  # num of continuous samples per frame
    # N_skip = 1024  # num of samples to skip between frames
    # N_frame = 1  # num of frames
    iscalibrated = False  # apply rx and tx calibration factors
    # isdebug = True  # print debug messages
    isdebug = False  # print debug messages
    #sc = 400  # subcarrier index
    mod = 'qam'
    seed = 100
    TxPwr = 4000  # transmit power

    # Reload the FTDI drivers to ensure communication with the Sivers' array
    subprocess.call("../../scripts/sivers_ftdi.sh", shell=True)


    # ------ Create an argument parser ------
    parser = argparse.ArgumentParser()
    parser.add_argument("-f", "--freq", type=float, default=60.48e9, help="Carrier frequency in Hz (i.e., 60.48e9)")
    parser.add_argument("-n", "--node", type=str, default='srv1-in1', help="COSMOS-SB1 node name (i.e., srv1-in1)")
    parser.add_argument("-N", "--nfft", dest='N_fft', type=int, default='1024')  # num of continuous samples per frame
    parser.add_argument("-F", "--nframe", dest='N_frame', type=int, default='1')  # num of frames
    
    # "wides" is the wides OFDM; "simu" is COSMOS signal simulated by MATLAB; "cosmos" is COSMOS signal generated by Python
    parser.add_argument("-T", "--ssType", dest='sounding_signal_type', type=str, default='wides',help="wides, simu, cosmos")  
    parser.add_argument("-I", "--ssid", dest='sounding_signal_id', type=str, default='1',help="wides_ofdm_1.csv")
    parser.add_argument("-g", "--groupid", dest='groupID', type=str, default='1',help="1_x_data_file_name.txt")
    parser.add_argument("-d", "--dataid", dest='dataID', type=str, default='1',help="x_1_data_file_name.txt")
    parser.add_argument("-S", "--issavedata", dest='isSaveData', type=str, default='y',help="determine save data or not")

    parser.add_argument("--x1", type=int, default=0,help="x coordinate on XY table 1 (Tx)")
    parser.add_argument("--y1", type=int, default=0,help="y coordinate on XY table 1 (Tx)")
    parser.add_argument("--a1", type=int, default=0,help="angle of the array on XY table 1 (Tx)")

    parser.add_argument("--x2", type=int, default=1300,help="x coordinate on XY table 2 (Rx)")
    parser.add_argument("--y2", type=int, default=0,help="y coordinate on XY table 2 (Rx)")
    parser.add_argument("--a2", type=int, default=0,help="angle of the array on XY table 2 (Rx)")

    args = parser.parse_args()

    N_skip = args.N_fft  # num of samples to skip between frames
    N_frame = args.N_frame

    # Create a configuration parser
    config = configparser.ConfigParser()
    config.read('../../config/sivers.ini')


    # ------ Default value ------
    # measurement
    if not args.node:
        node = socket.gethostname().split('.')[0]
    else:
        node = args.node

    if not args.freq:
        freq = 60.48e9
    else:
        freq = args.freq

    if not args.N_fft:
        N_fft = 1024
    else:
        N_fft = args.N_fft

    if not args.N_frame:
        N_frame = 1
    else:
        N_frame = args.N_frame

    # sounding signal 
    if not args.sounding_signal_id:
        sounding_signal_id = '1'
    else:
        sounding_signal_id = args.sounding_signal_id

    if not args.sounding_signal_type:   # default sounding signal is "wides"
        sounding_signal_type = 'wides'
    else:
        sounding_signal_type = args.sounding_signal_type

    if sounding_signal_type == 'wides':
        sounding_signal_type = sounding_signal_type + '_ofdm'

    # XY table array position
    # 1
    if not args.x1:
        x1 = 0
    else:
        x1 = args.x1

    if not args.y1:
        y1 = 0
    else:
        y1 = args.y1

    if not args.a1:
        a1 = 0
    else:
        a1 = args.a1

    # 2
    if not args.x2:
        x2 = 1300
    else:
        x2 = args.x2

    if not args.y2:
        y2 = 0
    else:
        y2 = args.y2

    if not args.a2:
        a2 = 0
    else:
        a2 = args.a2
        


    # ------ Create the SDR ------
    sdr1_wides = mmwsdr.sdr.Sivers60GHz(config=config, node='srv1-in1', freq=freq,
                                  isdebug=isdebug, islocal=(node == 'srv1-in1'), iscalibrated=iscalibrated)

    sdr2_wides = mmwsdr.sdr.Sivers60GHz(config=config, node='srv1-in2', freq=freq,
                                  isdebug=isdebug, islocal=(node == 'srv1-in2'), iscalibrated=iscalibrated)


    # ------ Move Array back to position ------
    if config['srv1-in1']['table_name'] != None:
        xytable1 = mmwsdr.utils.XYTable(config['srv1-in1']['table_name'], isdebug=isdebug)
        # move the sdr1_wides to the designed position and angle. 
        # xytable1.move(x=float(config['srv1-in1']['x']), y=float(config['srv1-in1']['y']),
        #               angle=float(config['srv1-in1']['angle']))
        xytable1.move(x=x1, y=y1,angle=a1)
        print("Moving XY table 1...")
        XYtable1_name = args.groupID + "_" + args.dataID + "_XY1_.png"
        XYtable1_path = os.path.abspath('./Result/Group_' + str(args.groupID) + '/' + XYtable1_name)
        #time.sleep(3)
        

    if config['srv1-in2']['table_name'] != None:
        xytable2 = mmwsdr.utils.XYTable(config['srv1-in2']['table_name'], isdebug=isdebug)
        # move the sdr2_wides to the designed position and angle. 
        # xytable2.move(x=float(config['srv1-in2']['x']), y=float(config['srv1-in2']['y']),
        #               angle=float(config['srv1-in2']['angle']))
        xytable2.move(x=x2, y=y2,angle=a2)
        print("Moving XY table 2...")
        XYtable2_name = args.groupID + "_" + args.dataID + "_XY2_.png"
        XYtable2_path = os.path.abspath('./Result/Group_' + str(args.groupID) + '/'  + XYtable2_name)
        #time.sleep(3)
        


    # ------ Main experimentation loop ------
    while (1):
        
        # ----- Create a tone in frequency domain -----
        # scale time-domain signal multiply with Tx power;
        # txtd = mmwsdr.utils.waveform.onetone(subCarrierIndex=subCarrierIndex, nfft=N_fft) * TxPwr
        # txtd = mmwsdr.utils.waveform.wideband(sc_min=args.sc_min, sc_max=args.sc_max, nfft=N_fft, mod=mod, seed=seed) * TxPwr
        # --- Read real part data ---
        # real_path = os.path.abspath('./SoundingSignal/demo_scmin_50_scmax_150_real.csv')
        real_path = os.path.abspath('./SoundingSignal/' + sounding_signal_type + '_real_' + sounding_signal_id + '.csv')
        with open(real_path) as real_file:
            real_reader = csv.reader(real_file, delimiter=',')
            lines= len(list(real_reader))
        real_file.close()
        with open(real_path) as real_data_file:
            real_data_reader = csv.reader(real_data_file, delimiter=',')
            data_real = np.empty(lines, dtype=float)
            count = 0
            for row in real_data_reader:   #loop through each row
                for item in row:
                    data_real[count]=float(item)
                count += 1
        real_data_file.close()
        # --- Read image part data ---
        # imag_path = os.path.abspath('./SoundingSignal/demo_scmin_50_scmax_150_imag.csv')
        imag_path = os.path.abspath('./SoundingSignal/' + sounding_signal_type + '_imag_' + sounding_signal_id + '.csv')
        with open(imag_path) as imag_data_file:
            imag_data_reader = csv.reader(imag_data_file, delimiter=',')
            data_imag = np.empty(lines, dtype=float)
            count = 0
            for row in imag_data_reader:   #loop through each row
                for item in row:
                    data_imag[count]=float(item)
                count += 1
        imag_data_file.close()
        # --- Combine data ---
        data = np.empty(lines, dtype=complex)
        for i in range(lines):
            data[i]=complex(data_real[i], data_imag[i])

        txtd = data * TxPwr


        # ----- Transmit and Receive -----
        # fixed to use SDR1 as Tx and SDR2 as Rx
        sdr1_wides.send(txtd)
        rxtd = sdr2_wides.recv(N_fft, N_skip, N_frame)


        # [B]
        # ----- Save the Received Data -----
        # Save XY table picture
        print("Capture XY table 1 picture...")
        t1 = threading.Thread(target=xytable1.video(t=5, filename=XYtable1_path, isSaveData=args.isSaveData))
        t1.start()
        t1.join()

        time.sleep(5)

        print("Capture XY table 2 picture...")
        t2 = threading.Thread(target=xytable2.video(t=5, filename=XYtable2_path, isSaveData=args.isSaveData))
        t2.start()
        t2.join()


        # data_file_name = args.groupID + "_" + args.dataID + "_frame_" + str(N_frame) + "_minSc_" + str(args.sc_min) + "_maxSc_" + str(args.sc_max) + ".csv"
        data_file_name = args.groupID + "_" + args.dataID + "_frame_" + str(N_frame) + ".csv"
        data_file_path = os.path.abspath('./Result/Group_' + str(args.groupID) + '/' + data_file_name)
        print("Saving measurement data...")
        if args.isSaveData == "y":
            np.savetxt(data_file_path, np.transpose(rxtd), delimiter=',')



        # ----- Convert the received data to frequncy domain -----
        print("Processing measurement data...")
        rxfd = np.fft.fft(rxtd, axis=1)
        rxfd = np.fft.fftshift(rxfd, axes=1)


        # ----- Find the magnitude of the data in dB -----
        mag = 20 * np.log10(np.abs(rxfd))
        

        # ----- Plot the data -----
        f = np.linspace(-N_fft / 2, N_fft / 2 - 1, N_fft)  # subcarrier index vector for plotting
        for iframe in range(N_frame):
            plt.plot(f, mag[iframe, :], '-')
        plt.xlabel('Sub-carrier Index')
        plt.ylabel('Magnitude [dB]')
        plt.tight_layout()
        y_min = np.mean(mag) - 20
        y_max = np.max(mag) + 20
        plt.ylim([y_min, y_max])
        plt.grid()
        # fig_name = args.groupID + "_" + args.dataID + "_frame_" + str(N_frame) + "_minSc_" + str(args.sc_min) + "_maxSc_" + str(args.sc_max) + ".png"
        fig_name = args.groupID + "_" + args.dataID + "_frame_" + str(N_frame) + ".png"
        fig_path = os.path.abspath('./Result/Group_' + str(args.groupID) + '/' + fig_name)
        print("Saving frequency domain signal figure...")
        if args.isSaveData == "y":
            plt.savefig(fig_path)
        print('Used sounding signal is: ' + sounding_signal_type)
        plt.show()

        if sys.version_info[0] == 2:
            ans = raw_input("Enter 'q' to exit or\n press enter to continue ")
        else:
            ans = input("Enter 'q' to exit or\n press enter to continue ")

        if ans == 'q':
            break

    # ---------- Close the TPC connections ----------
    del sdr1_wides
    del sdr2_wides


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        pass
