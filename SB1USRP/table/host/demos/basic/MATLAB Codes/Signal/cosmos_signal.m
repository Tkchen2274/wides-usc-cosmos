%% COSMOS Wideand Signal Simulated by MATLAB
% clc;clear;
% % close all
% rng(100)
% N = 1024;
% 
% sounding_signal_id =3;
% fs = 3932.16e6/4;
% 
% % sc = 400;
% % index be like: [sc_min, sc_max)
% sc_min = -200;
% sc_max = 200;
% 
% 
% txfd = zeros(N, 1);
% aaa = zeros(N, 1);
% % TxSignalFreqDomain(n_fft/2 + sc_min : n_fft/2 + sc_max-1) = 1+1i;
% for i = N/2 + sc_min+1 : N/2 + sc_max+1
%     key = rand()*2-1;
%     if key > 0.5
%         txfd(i) = 1+1i;
%         aaa(i) = key;
%     elseif key <= 0.5 && rand() > 0
%         txfd(i) = 1-1i;
%         aaa(i) = key;
%     elseif key <= 0 && rand() > -0.5
%         txfd(i) = -1+1i;
%         aaa(i) = key;
%     else
%         txfd(i) = -1-1i;
%         aaa(i) = key;
%     end
% end
% 
% % TxSignalFreqDomain(n_fft/2+sc) = 1;
% txfd = circshift(txfd, N/2);
% 
% % Transform to time domain, normalization and get transmitted power
% txtd = ifft(txfd);
% txtd = txtd /max(max(abs(real(txtd)), abs(imag(txtd)))); % standard normalization method
% txtd = txtd(:, 1);
% td = txtd;
% td_real = real(td);
% td_imag = imag(td);
% 
% df = fs/N;
% f = -fs/2:df:fs/2-df;
% figure;plot(f/1e6, 20*log10(abs(circshift(fft(td), N/2))))
% title('Normalized Sounding Signal by simulating COSMOS')
% xlabel('Frequency [MHz]')
% ylabel('Magnitude [dB]')
% grid minor
% 
% figure;plot(-N/2:N/2-1, 20*log10(abs(circshift(fft(td), N/2))))
% title('Normalized Sounding Signal by simulating COSMOS')
% xlabel('Subcarrier Index')
% ylabel('Magnitude [dB]')
% grid minor
% 
% 
% 
% % csvwrite(['simu_real_', num2str(sounding_signal_id), '.csv'], td_real)
% % csvwrite(['simu_imag_', num2str(sounding_signal_id), '.csv'], td_imag)



%% COSMOS Signal Generated by Python
clc;clear;close all
directory = 'C:\Storage\OneDrive - University of Southern California\Documents\USC\WiDes\Projects\1st Year\COSMOS\SB1 Files\host\demos\basic\SoundingSignal';
filename = 'SoundingSignal_minSc_-500_maxSc_500.csv';

sounding_signal_id = 3;


fileID = fopen([directory, '\', filename]);
A = textscan(fileID, '%s');
fclose(fileID);

aa = A{1,1};
data_char = char(aa);

clear A  aa

% delete the "(" at the beginning
data_char(:, 1) = [];

% add the "+" sign at the beginning for positive real parts
N = size(data_char, 1);
for i = 1:N
    if data_char(i, 1) ~= "-"
        temp = data_char(i, :);
        temp(end) = [];
        temp = ['+', temp];
        data_char(i, :) = temp;
    end
end
clear temp

% delete the last 1 or 2 chars to remove either ") " or ",)"
data_char(:, end) = [];



% This step transfer to double number
txtd = zeros(N, 1);
for i = 1:N
    txtd(i) = str2double(data_char(i,:));
end
txtd = reshape(txtd, 1, []).';
td = txtd;
td_real = real(td);
td_imag = imag(td);


fs = 983.04e6;
df = fs/N;
f = -fs/2:df:fs/2-df;
figure;plot(f/1e6, 20*log10(abs(circshift(fft(td), N/2))))
title('Normalized Sounding Signal by COSMOS Python')
xlabel('Frequency [MHz]')
ylabel('Magnitude [dB]')
grid minor

figure;plot(-N/2:N/2-1, 20*log10(abs(circshift(fft(td), N/2))))
title('Normalized Sounding Signal by COSMOS Python')
xlabel('Subcarrier Index')
ylabel('Magnitude [dB]')
grid minor


csvwrite(['cosmos_real_', num2str(sounding_signal_id), '.csv'], td_real)
csvwrite(['cosmos_imag_', num2str(sounding_signal_id), '.csv'], td_imag)
